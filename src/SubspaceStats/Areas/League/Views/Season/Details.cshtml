@using Microsoft.Extensions.Options
@using SubspaceStats.Areas.League.Models.Season
@using SubspaceStats.Options
@model DetailsViewModel
@inject IOptions<GeneralOptions> generalOptions

@{
	ViewData["Title"] = "Manage Season";
}

@await Html.PartialAsync("_LeagueSeasonChooser", Model.LeagueSeasonChooser)
@await Html.PartialAsync("_SeasonNav")
@* <h1>Manage Season</h1> *@

<div class="container">
	<div class="row">
		<table class="table table-borderless table-sm w-auto">
			<tr>
				<td class="text-end fw-bold">Season Name:</td>
				<td class="text-start">@Model.SeasonDetails.SeasonName</td>
			</tr>
			<tr>
				<td class="text-end fw-bold">Created:</td>
				<td class="text-start">@TimeZoneInfo.ConvertTimeFromUtc(Model.SeasonDetails.CreatedTimestamp, generalOptions.Value.TimeZone)</td>
			</tr>
			<tr>
				<td class="text-end fw-bold">Start Date:</td>
				<td class="text-start">@Model.SeasonDetails.StartDate</td>
			</tr>
			<tr>
				<td class="text-end fw-bold">End Date:</td>
				<td class="text-start">@Model.SeasonDetails.EndDate</td>
			</tr>
			<tr>
				<td class="text-end fw-bold">Stat Period:</td>
				<td class="text-start">
					@if (Model.SeasonDetails.StatsGameType is not null && Model.SeasonDetails.StatPeriodRange is not null)
					{
						<a asp-area="" asp-controller="Leaderboard" asp-action="Index" asp-route-gameType="@Model.SeasonDetails.StatsGameType.Id" asp-route-period="@Model.SeasonDetails.StatPeriodId" target="_blank">@Model.SeasonDetails.StatPeriodRange.Value.ToString()</a>
					}
				</td>
			</tr>
			<tr>
				<td class="text-end fw-bold">Game Type (stats):</td>
				<td class="text-start">
					@if (Model.SeasonDetails.StatsGameType is not null)
					{
						@Model.SeasonDetails.StatsGameType.Name
					}
				</td>
			</tr>
			<tr>
				<td class="text-end fw-bold">Game Type (league):</td>
				<td class="text-start">@Model.SeasonDetails.LeagueGameType.Name</td>
			</tr>
		</table>
	</div>
	<div class="row g-3">
		
		<div class="col-12 col-md-6 col-lg-4">
			<div class="card h-100">
				<div class="card-header text-center">Copy Season</div>
				<div class="card-body">
					<div class="card-text mb-3">A new season can be created using this season as a template. You'll be given a choice of which aspects to copy: players, teams, matches, and/or rounds.</div>
					<a asp-action="Copy" class="btn btn-primary  text-nowrap"><i class="bi bi-copy me-1"></i>Create a Copy</a>
				</div>
			</div>
		</div>
		@if (Model.SeasonDetails.StartDate is null)
		{
			<div class="col-12 col-md-6 col-lg-4">
				<div class="card h-100">
					<div class="card-header text-center">Season is not yet started</div>
					<div class="card-body">
						<div class="alert alert-info">When it is time, use this to start the season. It will set the season's <strong>Start Date</strong> and will create a <strong>Stat Period</strong> to store league stats into.</div>
						<form asp-action="Start">
							<div class="mb-3">
								<label for="StartDate" class="form-label">Start Date</label>
								<input id="StartDate" name="StartDate" type="date" class="form-control" />
							</div>
							<div class="d-flex">
								<button type="submit" class="btn btn-primary"><i class="bi bi-play-btn me-1"></i>Start Season</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		}
		@if (Model.SeasonDetails.StartDate is not null && Model.SeasonDetails.EndDate is null)
		{
			<div class="col-12 col-md-6 col-lg-4">
				<div class="card h-100">
					<div class="card-header text-center">End the season</div>
					<div class="card-body">
						<div class="alert alert-info">
							Marks the season as ended. This updates the season's <strong>End Date</strong> and the <strong>Stat Period</strong> range upper bound with the oldest game timestamp.
							This will prevent games in the season from getting started or restarted (?startleaguematch -f) in case someone typos a Match Id.
						</div>
						<form asp-action="End">
							<div class="d-flex">
								<button type="submit" class="btn btn-primary"><i class="bi bi-stop-btn me-1"></i>End Season</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		}
		@if (Model.SeasonDetails.StartDate is not null && Model.SeasonDetails.EndDate is not null)
		{
			<div class="col-12 col-md-6 col-lg-4">
				<div class="card h-100">
					<div class="card-header text-center">Undo End Season</div>
					<div class="card-body">
						<div class="alert alert-info">
							Reopens a season after having ended it. This removes the season <strong>End Date</strong> and <strong>Stat Period</strong> range upper bound.
						</div>
						<form asp-action="UndoEnd">
							<div class="d-flex">
								<button type="submit" class="btn btn-primary"><i class="bi bi-arrow-counterclockwise me-1"></i>Undo End Season</button>
							</div>
						</form>
					</div>
				</div>
			</div>
		}
		@if (Model.SeasonDetails.StartDate is not null && Model.SeasonDetails.StatsGameType?.GameMode == GameMode.TeamVersus)
		{
			<div class="col-12 col-md-6 col-lg-4">
				<div class="card h-100">
					<div class="card-header text-center">Refresh player stats (Team Versus)</div>
					<div class="card-body">
						<div class="alert alert-info">
							Refreshes player stats for the season's <strong>Stat Period</strong>.
							This can be useful if a match was re-played (do over) and the old match's stats are still in the mix.
						</div>
						<form asp-action="RefreshPlayerStats">
							<div class="d-flex mb-3">
								<button type="submit" class="btn btn-primary"><i class="bi bi-arrow-repeat me-1"></i>Refresh player stats</button>
							</div>
						</form>
						@if (!string.IsNullOrWhiteSpace(Model.RefreshPlayerStatsMessage))
						{
							<div class="alert alert-warning">@Model.RefreshPlayerStatsMessage</div>
						}
					</div>
				</div>
			</div>
		}
		@if (Model.SeasonDetails.StartDate is not null && Model.SeasonDetails.EndDate is null)
		{
			<div class="col-12 col-md-6 col-lg-4">
				<div class="card h-100">
					<div class="card-header text-center">Refresh team stats</div>
					<div class="card-body">
						<div class="alert alert-info">
							Refreshes team stats (wins, losses, and draws) for all teams in the season.
							This may be useful if team stats gets out of sync.
						</div>
						<form asp-action="RefreshTeamStats">
							<div class="d-flex mb-3">
								<button type="submit" class="btn btn-primary"><i class="bi bi-arrow-repeat me-1"></i>Refresh team stats</button>
							</div>
						</form>
						@if (!string.IsNullOrWhiteSpace(Model.RefreshTeamStatsMessage))
						{
							<div class="alert alert-warning">@Model.RefreshTeamStatsMessage</div>
						}
					</div>
				</div>
			</div>
		}
	</div>
</div>

@section Scripts {
	@{
		await Html.RenderPartialAsync("_ValidationScriptsPartial");
		await Html.RenderPartialAsync("_LeagueSeasonChooseScript", Model.LeagueSeasonChooser);
	}
}
